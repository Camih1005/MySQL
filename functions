Funciones de Cadena:

CONCAT(str1, str2, ...): Concatena cadenas.
SUBSTRING(str, start, length): Extrae una subcadena.
LENGTH(str): Devuelve la longitud de una cadena.
LOWER(str), UPPER(str): Convierte una cadena a minúsculas o mayúsculas, respectivamente.
TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str): Elimina espacios en blanco de una cadena.
Funciones Numéricas:

ABS(x): Devuelve el valor absoluto de x.
ROUND(x, d): Redondea un número a d decimales.
CEIL(x), FLOOR(x): Devuelve el entero más pequeño/más grande no menor que x.
Funciones de Fecha y Hora:

NOW(): Devuelve la fecha y hora actuales.
DATE_FORMAT(date, format): Formatea una fecha según el formato especificado.
DATEDIFF(date1, date2): Devuelve la diferencia en días entre dos fechas.
Funciones de Control de Flujo:

IF(expr, true_val, false_val): Retorna un valor dependiendo de si la expresión es verdadera o falsa.
CASE WHEN condition THEN result WHEN condition THEN result ELSE result END: Realiza evaluaciones condicionales.
Funciones de Agregación:

SUM(column): Devuelve la suma de los valores de una columna.
AVG(column): Devuelve el promedio de los valores de una columna.
COUNT(column): Devuelve el número de filas que coinciden con la condición dada.
MIN(column), MAX(column): Devuelven el valor mínimo/máximo de una columna.
Funciones de Búsqueda de Patrones:

LIKE(pattern): Realiza una búsqueda de patrones en una cadena.
REGEXP(pattern): Realiza una búsqueda de patrones utilizando expresiones regulares.


-- procedimientos almacenados

-- beneficios:  eficiencia -optimizacion -Seguridad 
-- ventajas : modularidad - mayor rendimiento - seguridad

-- ALGO ASI:
/*
 create procedure nombre_procedimiento(parametros)
 begin
 -- declaraciones sql y logica del procedimeinto
 end
*/

/* 
CUALES SON LOS PARAMETRO DE ENTRADA Y SALIDA?

IN: el valor del parametro se pasa al pprocedimiento y no se puede ser modificaado dentro
del procedimiento

OUT: el procedimiento puede cambiar el valor del parametro y este cambio
se refleja fuera del procedimiento

INOUT: combinacion de IN y OUT. el valor puede ser pasado del procedimiento
y tambien modificado dentro del mismo
*/

delimiter //
create procedure calcularTotal(IN precio DECIMAL(10,2),IN cantidad int,OUT total DECIMAL(10,2))
begin
set total = precio * cantidad;
end//

delimiter ;

set @total = 0;
call tienda.calcularTotal(10,5,@total);
select @total;

create database base_ejemplo;
use base_ejemplo;

create table productos(
id INT NOT NULL auto_increment,
nombre varchar(20) not null,
estado varchar(20) not null default "disponible",
precio float not null default 0.0,
primary key(id)
);

INSERT INTO productos (nombre, estado, precio) VALUES
('Producto1', 'disponible', 10.99),
('Producto2', 'disponible', 20.49),
('Producto3', 'agotado', 5.99),
('Producto4', 'disponible', 15.29),
('Producto5', 'disponible', 12.99),
('Producto6', 'agotado', 8.99),
('Producto7', 'disponible', 18.79),
('Producto8', 'agotado', 6.49),
('Producto9', 'disponible', 22.99),
('Producto10', 'disponible', 14.99),
('Producto11', 'disponible', 11.99),
('Producto12', 'agotado', 9.99),
('Producto13', 'disponible', 17.99),
('Producto14', 'disponible', 19.99),
('Producto15', 'disponible', 16.99),
('Producto16', 'agotado', 7.99),
('Producto17', 'disponible', 21.99),
('Producto18', 'disponible', 24.99),
('Producto19', 'disponible', 13.99),
('Producto20', 'agotado', 8.49);

select * from productos;

delimiter $$
create procedure obtenerProductosPorEstado(in nombre varchar(255))
begin
select * from productos where estado = nombre;
end $$

delimiter ; 

set @nombre = 0;
call obtenerProductosPorEstado('agotado')

-- otro
;
delimiter $$
create procedure contarProductosPorEstado(
in estado varchar(20),out numero INT)
BEGIN
	Select count(id) into numero FROM productos where estado
    = estado;
end $$
delimiter ; 

set @cantidad_disponible = 0;
call contarProductosPorEstado("disponible",
@cantidad_disponible);
select @cantidad_disponible as productosDisponibles;


delimiter $$
create procedure venderProducto
(inout beneficio int(255),in id_producto int)
begin
	declare precio_producto float;
    select precio into precio_producto from productos
    where id = id_producto;
    set beneficio = beneficio + precio_producto;
    end $$
    delimiter ;
    drop procedure venderProducto;
    set @beneficio_acumulado = 0;
    call venderProducto(@beneficio_acumulado,1);
    call venderProducto(beneficio_acumulado,2);
    select @beneficio_acumulado as Beneficiototal;

-- ejemplos

use world;

delimiter $$
create procedure listarCiudadesDePais(
in nombrePais varchar(100)
)
begin 
	select c.name from country as p
    inner join city as c on c.countrycode = p.code
    where upper(p.name) = upper(nombrePais);
    end $$
delimiter ;
drop procedure listarCiudadesDePais;
call listarCiudadesDePais("Colombia");


delimiter $$
create procedure contarCiudades(
in nombre_pais varchar(100),out cantidad int
)
begin 
	select count(c.name) into cantidad from country as p
    inner join city as c on c.countrycode = p.code
    where upper(p.name) = upper(nombre_pais);
    end $$
delimiter ;
drop procedure contarCiudades;

set @ciudades = 0;
call contarCiudades("Colombia",@ciudades);
select @ciudades as cantodadCiud


delimiter $$ 
create procedure CalPoblacion(
in paises varchar(100),out cantidad int)
begin
	select p.name,p.population from country as p
    inner join countrylanguage as l on l.countrycode = p.code
    where l.isofficial = "T" and p.name = paises;
    end $$
    delimiter ;
  drop procedure CalPoblacion;  
    set @poblacion = 0;
    call CalPoblacion("colombia",@poblacion);
    call CalPoblacion("brazil",@poblacion);
    select Calpoblacion as cantidades;

select p.name,p.population from country as p
    inner join countrylanguage as l on l.countrycode = p.code
    where l.isofficial = "T" and p.name = "Colombia";
    
    -- segundoo
    
    
SELECT * FROM world.countrylanguage;

-- ejercicio en casa

delimiter // 
create procedure ciudadesCONT(in ciudades varchar(100))
begin 
	select c.name from city as c
    join country as p on c.CountryCode = p.code
    where p.name = UPPER(ciudades);
END //
delimiter ;

call ciudadesCONT("colombia");

-- Seleccionar la cantidad de ciudades de un pais y que se vaya acumulando
drop procedure cantCiudades;
delimiter //
create procedure cantCiudades(inout cantidad int,in pais varchar(100))
begin
	declare guardarIn int;
	select ifnull(count(c.name),0) into guardarIn from country as p
	join city as c on p.code = c.countrycode
    where p.name = pais;
    set cantidad = cantidad + guardarIn;
end //
delimiter ;

set @cantidad := 0;
call cantCiudades(@cantidad,"brazil");
select @cantidad;

SELECT * FROM city  ;

-- resto
drop procedure cantCiudades;
delimiter //
create procedure cantCiudades(inout cantidad int,in pais varchar(100))
begin
	declare guardarIn int;
	select ifnull(count(c.name),0) into guardarIn from country as p
	join city as c on p.code = c.countrycode
    where p.name = pais;
    set cantidad = cantidad + guardarIn;
end //

    -- ESTRUCTURA IF-THEN-ELSE
    /*IF condition then
      ELSE
      END IF                */
    
-- ACCIONES A REPETIR
/*LOOP
ID condicion_salida then
	leave loop_laber;
    end if;
    end loop loop_label*/
    
    
 /*
 repeat
	-- acciones a repetir
 until condition
 end repeat
 */   
 -- es solo cuando es falsa cumple   
delimiter //
create procedure aumentarsalario()
begin
	repeat
		update empleados set salario = salario * 1.05 where salario < 3000;
        until (select count(*)from empleados where salario < 3000)= 0
        end repeat;
end//
delimiter ; 

-- WHILE

/*
solo si la condicion es verdadera
while condicion do
-- acciones a repetir
end while
-- primero preguna y despues hace
*/        
delimiter // 

/*create procedure contarEMpleadosAltosSalarios()
begin
	declare contador int default 0;
    declare totalEmpleados
    */
    
 -- ESTRUCRTURA CASE   
    
/*
case expresion
when valor2 then
--accion a repetir
when valor3 then
--accion a repetir
when valor4 then
--accion a repetir
else
--accion a repeti
end case
*/    

-- EXISTE DOS TIPOS DE EXCEPCIONES 
-- 1.CONTINUE Y EXIT
-- DECLARE HANDLER0

SELECT SIN(pi()* pi());

use tienda;

drop procedure insertarFabricante;
delimiter //
create procedure insertarFabricante(in idFab int,in nombrefabri varchar(100))
begin 
declare exit handler for 1062 select concat("error el fabricante ",idFab," ya existe")
 as error;
insert into fabricante values(idFab,nombrefabri);
end//
delimiter ;

call insertarFabricante(10,"motorola");


delimiter ;

set @cantidad := 0;
call cantCiudades(@cantidad,"brazil");
select @cantidad;


SELECT IFNULL(COUNT(c.name), 0)
FROM country AS p
LEFT JOIN city AS c ON p.code = c.countrycode
WHERE p.name = 'Colombia';


-- ejercicio
 -- Obtener la población del país especificado que el idioma oficial sea español
delimiter //
create procedure PoblacionP(inout cantidad int,in pais varchar(100))
begin
	declare Guardador int;
	select p.population as valiPop into Guardador from country as p
    join countrylanguage as l  on l.countrycode = p.code 
    where language = "spanish" and isofficial = "T" and p.name = pais;
    SET cantidad = cantidad + IF(Guardador > 0, Guardador, 0);
    end//
delimiter ;
drop procedure PoblacionP;

set @poblacionacum = 0;
call PoblacionP(@poblacionacum,"argentina");
select format((@poblacionacum),0) as acumulado;

-- validando
select if(p.population > 0,p.population,"0") as valiPop from country as p
    join countrylanguage as l  on l.countrycode = p.code 
    where language = "spanish" and isofficial = "T" and p.name = "brazil";
    
    select * from country;



delimiter // 
create procedure empleAlt(in entradaFecha date,in salidaFecha date,in Depar int)
begin
	select Emp.* from Emp
    join Dept as d on Emp.Dept_No = d.Dept_No
    where Fecha_Alt between entradaFecha and  salidaFecha and d.Dept_No = Depar ;
    end //
delimiter ;
drop procedure insertarEmpl;
call empleAlt("1980-11-19","1988-11-19",20);

-- segundo punto

delimiter //
create procedure insertarEmpl(in Emp_NoE int,ApellidoE varchar(100),in OficioE varchar(100),in DirE varchar(100)
,in Fecha_AltE date,in SalarioE DECIMAL,in ComisionE decimal,in Dep_NoE int)
begin
	declare exit handler for 1062 select concat("error el EMPLEADO ",Emp_NoE," ya existe")
	as error;
	insert into Emp values(Emp_NoE,ApellidoE,OficioE,DirE,Fecha_AltE,SalarioE,ComisionE,Dep_NoE);
    END//
delimiter ;

call insertarEmpl(7119,"CELIS","DIRECTOR",6969,"1980-11-19",200000,300000,20);
    
select * from Emp;


-- tercer punto;
drop procedure empleNum;
delimiter // 
create procedure empleNum(in Depar int)
begin
	select count(em.Apellido)as cantidad from Emp as em
    join Dept as d on em.Dept_No = d.Dept_No
    where em.Dept_No = Depar 
    group by em.Apellido;
    end //
delimiter ;

call empleNum(10)

-- tercer punto;
drop procedure empleNum;
delimiter // 
create procedure empleNum(in Depar int)
begin
	select count(em.Apellido)as cantidad from Emp as em
    join Dept as d on em.Dept_No = d.Dept_No
    where em.Dept_No = Depar 
    group by em.Apellido;
    end //
delimiter ;

call empleNum(10);
use Hospital;
-- cuarto
/*4. Diseñe y construya un procedimiento igual que el anterior, pero que recupere también las
personas que trabajan en dicho departamento, pasándole como parámetro el nombres*/

delimiter // 
create procedure empleNum2(in nombreDep varchar(100))
begin

	select d.Dept_No,d.DNombre,em.Apellido,em.Salario from Emp as em
    join Dept as d on em.Dept_No = d.Dept_No
    where  d.DNombre = nombreDep;
    
    select d.Dept_No,d.DNombre,count(em.Apellido)as numeroEmpleados
    from Emp as em
    join Dept as d on em.Dept_No = d.Dept_No
    where d.DNombre = nombreDep
    group by d.Dept_No;

    
    end //
delimiter ;
drop procedure empleNum2;
call empleNum2("contabilidad")
-- ---
